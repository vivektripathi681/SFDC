<apex:page controller="SDOC.SDCreateController" 
tabStyle="SDOC__SDTemplate__c" standardstylesheets="true"
sidebar="{!sidebar}"
action="{!initStep3}"
lightningStylesheets="true"> 

<!-- ================ START LIGHTNING_REDIRECT_PANEL ================ -->
<apex:outputPanel id="lightning_redirect_panel">
<script>
if( (typeof sforce != 'undefined') && sforce && (!!sforce.one) ) {
  if ('{!doLightningRedirect}' === 'true') {
    sforce.one.navigateToURL('{!lightningRedirectURL}', true);
  }
}
</script>
</apex:outputPanel>
<!-- ================= END LIGHTNING_REDIRECT_PANEL ================= -->

<head>
<apex:styleSheet value="{!URLFOR($Resource.SDOC__SDoc,'skin.css')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'yahoo-dom-event.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'container-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'animation-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__ckEditor,'/ckeditor/ckeditor.js')}"/>
<style>
.buttonStyle { width:75px; height:30px; }
.buttonStyleSF1 { width:75px; height:50px; }
</style>
    
<!-- Must be included to use sforce.console.isInConsole() -->
<!-- Use version 30.0; isInConsole() doesn't work on version 40.0 -->
<apex:includeScript value="/support/console/30.0/integration.js"/>

<script>
// Hide Salesforce header if showheader=false is included in URL
var hideHeader = function() {
  var salesforceHeader = document.getElementById('AppBodyHeader');
  if (salesforceHeader !== null) {
    salesforceHeader.style.display = 'none';
  }
}

var showHeader = '{!$CurrentPage.parameters.showHeader}';
if (showHeader === 'false' || showHeader === '0') {
    hideHeader();
}
// End "Hide Salesforce header if showheader=false is included in URL"

// Hide Salesforce header if user is invoking S-Docs from Sales Console.
// This is finnicky as there are reported bugs with sforce.console.isInConsole();
// if this is the case, have the user include &showHeader=false in their S-Docs button. 
if (sforce.console.isInConsole()) {
    hideHeader();
}

function isBlank(val) {
  return val === '' || val === null || val === undefined;
}

function navToURL(fileid, attachmentid, urlstring){ 
    // Navigating to the Attachment/File record itself in SF1 opens the Attachment/File
    // in the SF1 PDF viewer without any navigation issues
    if( (typeof sforce != 'undefined') && (sforce!=null) ) {
        if (isBlank(fileid)) {
          sforce.one.navigateToSObject(attachmentid);
        }
        else if (isBlank(attachmentid)) {
          sforce.one.navigateToSObject(fileid);
        }
    }
    else {
            window.open(urlstring,'_blank');
    }
}

    function getQuerystring(key, default_)
        {
          if (default_==null) default_="";
          key = key.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
          var regex = new RegExp("[\\?&]"+key+"=([^&#]*)");
          var qs = regex.exec(window.location.href);
          if(qs == null)
            return default_;
          else
            return qs[1];
    }
    // Create a namespace for our custom functions
    YAHOO.namespace("force.com");
    YAHOO.force.com.showMe = function() {
        document.getElementById("myPanel").style.display = "block";
        YAHOO.force.com.myDialog.show();
    }
    YAHOO.force.com.hideMe = function() {
        YAHOO.force.com.myDialog.hide();
    }
    YAHOO.force.com.showEmail = function() {
        document.getElementById("emailPanel").style.display = "block";
        YAHOO.force.com.eDialog.show();
    }
    YAHOO.force.com.hideEmail = function() {
        YAHOO.force.com.eDialog.hide();
    }
    // Function called when the DOM is ready to create the dialog,
    // render the dialog into the document body, add our dialog skin
    // css to the body tag, and wire up the buttons on our dialog    
    YAHOO.force.com.init = function() {
        document.body.className = document.body.className + " yui-skin-sam";
        
        YAHOO.force.com.myDialog = new YAHOO.widget.Panel(
            "myPanel",  // The id of our dialog container
            { 
                    width           :   "700px",    // You can play with this until it's right
                    visible         :   false,  // Should be invisible when rendered
                    draggable       :   true,   // Make the dialog draggable
                    close           :   false,  // Don't include a close title button
                    modal           :   true,   // Make it modal
                    fixedCenter     :   true,   // Keep centered if window is scrolled
                    zindex          :   100,     // Make sure it's on top of everything
                    
                    // This line adds the appear/vanish fade effect
                    effect          :   {
                                          effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.40
                                        } 
            }
       );
       YAHOO.force.com.eDialog = new YAHOO.widget.Panel(
            "emailPanel",  // The id of our dialog container
            { 
                    xy              :   [75,75]
                    ,width           :   "850px"    // You can play with this until it's right
                    ,visible         :   false  // Should be invisible when rendered
                    ,draggable       :   true   // Make the dialog draggable
                    ,close           :   false  // Don't include a close title button
                    ,modal           :   true   // Make it modal
                    ,zindex          :   100     // Make sure it's on top of everything
                    
                    // This line adds the appear/vanish fade effect
                    ,effect          :   {
                                          effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.40
                                        } 
            }
            
         );
        
        // Render the dialog to the document.body level of the DOM
        YAHOO.force.com.myDialog.render(document.body);
        YAHOO.force.com.eDialog.render(document.body);
    }

    var newwindow;
    function popURL(url)
        {
          newwindow=window.open(url,"SDocs","width=1100,height=700,top=0,resizable,scrollbars,screenX=60,top=100,screenY=100");
            try{
                newwindow.document.location.href = url;
            }catch (exc){
                newwindow.close();
                newwindow=window.open(url,"SDocs","width=1100,height=700,top=0,resizable,scrollbars,screenX=60,top=100,screenY=100");
                newwindow.document.location.href = url;
            }
            if (window.focus){newwindow.focus()}
        }
</script>

</head>
<!-- This is the content of the modal dialog -->
<div id="myPanel" style="display: none" >
  <div class="hd">
    <apex:outputText value="Add Comment to Document" />
  </div> 
  <div class="bd">
      <apex:form >
        <apex:pageBlock >
          <apex:pageBlockSection columns="1">
           <apex:inputText size="75" maxlength="255" id="comment" value="{!CommentToAdd}" />
          </apex:pageBlockSection>
        </apex:pageBlock>
        <div style="text-align: right;" >
            <apex:actionStatus id="saveStatus">
                        <apex:facet name="start">
                            <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                        </apex:facet>
            </apex:actionStatus>
            <apex:commandButton value="Save" action="{!addComment}"
                    oncomplete="YAHOO.force.com.hideMe();" reRender="dg" status="saveStatus">
            </apex:commandButton>
            <apex:commandButton value="Cancel" immediate="true" 
              oncomplete="YAHOO.force.com.hideMe();"/>
        </div>
      </apex:form>
  </div>
  <div class="ft" style="font-size: 10px;">
    <apex:outputPanel layout="block">
      You can add a note/comment that will be associated with the document you have just generated.<br></br> 
      The comment will be visible to all users when viewing this document within a list,<br></br>
      but does not affect the document content.
    </apex:outputPanel>
  </div>
</div>

<div id="emailPanel" style="display: none" >
  <div class="hd">
    <apex:outputText value="Email Document(s)" />
  </div> 
  <div class="bd">
  <div class="ft" style="font-size: 10px;">
    <apex:outputPanel layout="block">
      You can use this page to email the documents you have just created. Use commas or semi-colons to separate email addresses.
    </apex:outputPanel>
  </div>
      <apex:form >
        <apex:pageBlock title="Email Details">
        <apex:outputPanel id="BtnsTopPanel">
            <div style="text-align: right;" >
                <apex:actionStatus id="statTop">
                    <apex:facet name="start">
                        Creating attachments, please wait...
                        <img src="{!URLFOR($Resource.SDoc,'spinner_large.gif')}" />
                    </apex:facet>
                 </apex:actionStatus>
                 <apex:commandButton id="SendBtn" value="Send" action="{!email}" 
                 disabled="{!emailTo==''}" status="statTop" styleClass="buttonStyle" />
                 <apex:commandButton id="Cancel" value="Cancel" action="{!returnToObj}" styleClass="buttonStyle" />
            </div>
        </apex:outputPanel>
         <apex:outputPanel id="emailSubPanel" >
          <apex:outputpanel id="loading" rendered="{!EmailTo=='Loading...'}">
           <center><img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />&nbsp;please wait...</center>
          </apex:outputpanel>
           <apex:pageBlockSection columns="2">
           <apex:outputLabel value="" for="eContact" style="white-space:nowrap;" rendered="{!NOT(EmailLockSendTo)}" />
                <apex:outputLabel value="" for="eContact" style="white-space:nowrap;" rendered="{!EmailLockSendTo}"/>
                <apex:outputpanel id="col2">
                    
                    <apex:outputPanel id="emailLookup">
                       <apex:outputText id="emailr" value="{!emailr}" escape="false">
                              <apex:actionStatus id="emailstat">
                                <apex:facet name="start">
                                    <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />&nbsp;please wait...
                                </apex:facet>
                            </apex:actionStatus>
                       </apex:outputText>
                    </apex:outputPanel>
                    <br/>
                    <apex:outputpanel id="pl" rendered="{!NOT(EmailLockSendTo)}">
                        <apex:selectList value="{!targetObjectId}" size="1" id="eContact" style="font-family:'Courier'">
                            <apex:selectOptions value="{!contactItems}"/>
                            <apex:actionSupport event="onchange" action="{!showEmail}" 
                            reRender="emailTo,emailr,BtnsTopPanel,BtnsBotPanel" status="emailstat"/>
                        </apex:selectList>
                    <apex:commandButton title="Refresh Emails" action="{!getContacts}" rerender="eContact"
                            style="background:url(/img/alohaSkin/sync.png) top left no-repeat;width:22px;   height:20px;background-position:2px 2px;vertical-align:bottom"
                            id="refButton" status="refreshStat"/>
                            <apex:actionStatus id="refreshStat">
                                <apex:facet name="start">
                                    <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />&nbsp;Loading...
                                </apex:facet>
                            </apex:actionStatus>
                    <br/></apex:outputpanel>
            </apex:outputpanel>
            
            <apex:outputLabel value="Contact Quick Pick" for="emailTo2f" rendered="{!EmailLockSendTo}"/>
            <apex:outputPanel id="emailTo2" rendered="{!EmailLockSendTo}">
                <apex:outputText id="emailTo2f" value="{!emailToRO}"  escape="false"/>
            </apex:outputPanel>
            
            <apex:outputLabel value="To:" for="emailTo2g" rendered="{!EmailLockSendTo}"/>
            <apex:outputPanel id="emailTo2b" rendered="{!EmailLockSendTo}">
                <apex:commandButton title="Refresh Emails" action="{!getContacts}" 
                            rendered="{!reloadable}"
                            reRender="emailTo2g,emailTo2f,BtnsTopPanel,BtnsBotPanel"
                            style="background:url(/img/alohaSkin/sync.png) top left no-repeat;width:22px;   height:20px;background-position:2px 2px;vertical-align:bottom"
                            id="refButton2" status="refreshStat2"/>
                            <apex:actionStatus id="refreshStat2">
                                <apex:facet name="start">
                                    <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />&nbsp;Loading...
                                </apex:facet>
                            </apex:actionStatus>
                <apex:outputText id="emailTo2g" value="{!emailTo}" rendered="{!EmailLockSendTo}"/>
            </apex:outputPanel>
           <apex:outputLabel value="To:" for="emailTo" rendered="{!NOT(EmailLockSendTo)}" />
           <apex:inputText size="100" maxlength="1000" id="emailTo" value="{!emailTo}" 
           rendered="{!NOT(EmailLockSendTo)}">
                <apex:actionSupport event="onchange" action="{!synchToRO}" reRender="BtnsTopPanel,BtnsBotPanel,emailTo2"/>
            </apex:inputText>

           <apex:outputLabel value="CC:" for="emailcc" rendered="{!NOT(EmailLockcc)}"/>
           <apex:inputText size="100" maxlength="1000" id="emailcc" value="{!emailcc}" rendered="{!NOT(EmailLockcc)}" />
           <apex:outputLabel value="CC:" for="emailcc2" rendered="{!EmailLockcc && emailcc!=null}"/>
           <apex:outputText id="emailcc2" value="{!emailcc}" rendered="{!EmailLockcc && emailcc!=null}"/>
           <apex:outputLabel value="BCC:" for="emailbcc" rendered="{!NOT(EmailLockbcc)}"/>
           <apex:inputText size="100" maxlength="1000" id="emailbcc" value="{!emailbcc}" rendered="{!NOT(EmailLockbcc)}"/>
           <apex:outputLabel value="BCC:" for="emailbcc2" rendered="{!EmailLockbcc && emailbcc!=null}"/>
           <apex:outputText id="emailbcc2" value="{!emailbcc}" rendered="{!EmailLockbcc && emailbcc!=null}"/>
           <apex:outputLabel value="Subject:" for="emailSubj"/>
           <apex:inputText size="100" maxlength="1000" id="emailSubj" value="{!emailSubj}" rendered="{!NOT(EmailLockSubj)}"/>
           <apex:outputText id="emailSubjRO" value="{!emailSubj}" rendered="{!EmailLockSubj}"/>
           <apex:outputLabel value="Attachments:" for="emailAtt"/>
           <apex:outputText id="emailAtt" value="{!emailAtt}" escape="false"/>
           <apex:image id="i1" url="/s.gif" width="1" height="1"/>
           <apex:image id="i2" url="/s.gif" width="650" height="1"/>
           </apex:pageBlockSection>
           <apex:pageBlockSection columns="1" rendered="{!emailPreview!='' && EmailLockBody}">
                <apex:outputLabel value="Preview inline HTML:" />
                <iframe src="{!emailPreview}" style="background-color:#ffffff" scrolling="true" width="100%" height="300"/>
           </apex:pageBlockSection>
            
            <apex:outputPanel id="editor" rendered="{!NOT(EmailLockBody)}">
                <apex:pageBlockSection columns="1" rendered="{!NOT(EmailLockBody)}">
                    <apex:pageBlockSectionItem >
                       <apex:inputTextarea id="editor1" value="{!emailPreviewEdit}" styleClass="ckeditor1" rendered="{!NOT(EmailLockBody)}"/>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
            </apex:outputPanel>
            </apex:outputPanel>

        <apex:outputPanel id="BtnsBotPanel">
            <div style="text-align: right;" >
                <apex:actionStatus id="statBot">
                    <apex:facet name="start">
                        Creating attachments, please wait...
                        <img src="{!URLFOR($Resource.SDoc,'spinner_large.gif')}" />
                    </apex:facet>
                 </apex:actionStatus>
                 <apex:commandButton id="SendBtn2" value="Send" action="{!email}" 
                 disabled="{!emailTo==''}" status="statBot" styleClass="buttonStyle"/>
                 <apex:commandButton id="Cancel2" value="Cancel" action="{!returnToObj}" styleClass="buttonStyle" />
            </div>
        </apex:outputPanel>
        </apex:pageBlock>

      </apex:form>
  </div>

</div>


<apex:sectionHeader title="Create S-Docs" subtitle="View Document(s)"/>
<apex:form >
<apex:pageMessages />
    <apex:outputPanel id="backnav" rendered="{!NOT(isMobileTheme)}">
        <span class="style6">&lt;&lt;</span>
        <apex:commandLink action="{!returnToObj}" value="Back"/> 
    </apex:outputPanel>
<br></br>
<br></br>
<apex:pageBlock title="View Document(s)">
    <apex:outputPanel id="out">
    <div id="generating_docs_status" style="display:none;">
        <img src="{!URLFOR($Resource.SDoc,'spinner_large.gif')}" />&nbsp;Generating documents, please wait...
    </div>
    <apex:pageBlockSection title="The following S-Docs have been created" columns="1" id="dg" collapsible="false">
                          <apex:pageBlockSectionItem >
                          <apex:panelGrid columns="3">
                              <apex:outputText rendered="{!AND(showEmailBtn, timeToRenderEmailBtn, NOT(isSSign))}">&nbsp;&nbsp;&nbsp;&nbsp;
                                  <img src="{!URLFOR($Resource.SDoc,'checkbox_arrow.png')}" />
                                  <apex:commandButton value="Email Selected Docs" action="{!advEmail}"
                                    rendered="{!NOT(lightningNav)}" /> 
                                  <apex:commandButton value="Email Selected Docs" action="{!advEmail}"
                                    rendered="{!lightningNav}" reRender="lightning_redirect_panel" /> 
                              </apex:outputText>
                              <apex:outputText rendered="{!isSSign}">&nbsp;&nbsp;&nbsp;&nbsp;
                                <apex:commandButton value="{!ssignButtonText}" 
                                  action="{!redirectToSSign}"
                                  rendered="{!NOT(lightningNav)}" />
                                <apex:commandButton value="{!ssignButtonText}" 
                                  action="{!redirectToSSign}"
                                  rendered="{!lightningNav}" reRender="lightning_redirect_panel" />
                              </apex:outputText>
                              <apex:outputText rendered="{!showGD}">&nbsp;&nbsp;&nbsp;&nbsp;
                                  <img src="{!URLFOR($Resource.SDoc,'checkbox_arrow.png')}" />
                                  <apex:commandLink styleClass="btn" value="Upload Selected to Google Docs" 
                                      action="{!upload}" style="padding:5px 10px 5px 10px; text-decoration:none; color:black;"
                                    rendered="{!NOT(lightningNav)}" /> 
                                  <apex:commandLink styleClass="btn" value="Upload Selected to Google Docs"
                                      action="{!upload}" style="padding:5px 10px 5px 10px; text-decoration:none; color:black;"
                                    rendered="{!lightningNav}" reRender="lightning_redirect_panel" /> 
                              </apex:outputText>
                            </apex:panelGrid>
                          </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!NOT(isMobileTheme)}">
                    <apex:pageBlockTable value="{!SDDocsGenerated}" var="ag">
                        <apex:column width="20px" >
                            <apex:outputPanel rendered="{!ag.checkboxVisible}">
                                <apex:inputCheckbox value="{!ag.checked}"/>
                                <apex:actionsupport event="onclick" action="{!addDoc}" rerender="emailSubPanel" />
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!NOT(ag.checkboxVisible) && showEmailBtn}">
                                                <center><img src="/img/func_icons/util/lock12.gif"/></center>
                            </apex:outputPanel>
                        </apex:column>
                        <apex:column width="40px" headerValue="View">
                            
                            <a href='{!ag.docURL}' target='_blank'><img src='{!ag.formatIconImgSrc}' border='0' /></a>
                        </apex:column>
                         <apex:column width="40px" headerValue="Edit">
                            <apex:outputPanel rendered="{!NOT(ISBLANK(ag.editLink))}">
                              <b><a href='{!ag.editLink}' target='_blank'><img src='/img/icon/custom51_100/pencil16.png' alt='Edit' border='0'/></a></b>
                            </apex:outputPanel>
                        </apex:column>
                        <apex:column headerValue="Document Number">
                     <a href="{!ag.docURL}" target="_blank">{!ag.d.Name}</a>
                        </apex:column>
                        <apex:column value="{!ag.d.SDOC__Document_Name__c}" headerValue="Document Name"/>                     
                        <apex:column headerValue="Comments" rendered="{!ISNULL(ag.d.SDOC__Comment__c)}">
                            <apex:commandLink value="Add" oncomplete="YAHOO.force.com.showMe();"
                                style="padding:2px 5px 2px 5px; text-decoration:none; color:black;"
                                action="{!setCID}" styleClass="btn"> 
                                    <apex:param name="agID" value="{!ag.d.ID}"/>
                            </apex:commandLink>
                        </apex:column>
                        <apex:column headerValue="Comments" rendered="{!NOT(ISNULL(ag.d.SDOC__Comment__c))}">
                            <apex:commandLink value="{!ag.d.SDOC__Comment__c}" oncomplete="YAHOO.force.com.showMe();"
                                action="{!setCID}"> 
                                    <apex:param name="agID" value="{!ag.d.ID}"/>
                            </apex:commandLink>
                        </apex:column>
                        <apex:column value="{!ag.d.SDOC__Status__c}" headerValue="Status"/> 
                        <apex:column value="{!ag.d.CreatedBy.Name}" headerValue="Created By"/> 
                        <apex:column value="{!ag.d.CreatedDate}" headerValue="Created On"/> 
                    </apex:pageBlockTable>
         </apex:pageBlockSectionItem>


         <apex:pageBlockSectionItem rendered="{!isMobileTheme}">
                    <apex:pageBlockTable value="{!SDDocsGenerated}" var="ag">
                        <apex:column width="20px">
                            <apex:outputPanel rendered="{!ag.checkboxVisible}">
                                <apex:inputCheckbox value="{!ag.checked}" rendered="{!ag.checkboxVisible}"/>
                                <apex:actionsupport event="onclick" action="{!addDoc}" rerender="emailSubPanel" />
                            </apex:outputPanel>                 
                            <apex:outputPanel rendered="{!NOT(ag.checkboxVisible) && showEmailBtn}">
                                <center><img src="/img/func_icons/util/lock12.gif"/></center>
                            </apex:outputPanel>
                        </apex:column>
                        <!-- Fix 7/14 -->
                        <!-- As of 7/14, S-Docs for Salesforce1 only supports viewing templates with 
                        "Auto-create File" checked. Documents with "Auto-create File" checked and
                        documents viewed as Visualforce pages (e.g. /apex/SDTemplatePDF?id=...)
                        do not work properly on Salesforce1 13.0 on Android and possibly other devices

                        To reliably view a File in the SF1 app's file viewer or be able to download it
                        in a mobile browser, you need to use sforce.one.navigateToSObject() to redirect 
                        the user to the ID of the ContentDocument (NOT ContentVersion, as this doesn't work
                        in iOS in both the app and browser) representing that File.
                        
                        The problem with this is that in mobile browsers, the user will be redirected to the
                        record detail page of the File rather than given an instant download. This is fine though
                        as that record detail page has a download link they can use. -->
                        <apex:column headerValue="View"> <!-- rendered="{!NOT(isAndroid)}"> -->
                        <a id="viewlink" title="Click to View"
                                 href="#" onclick="navToURL('{!ag.contentDocumentId}','{!ag.d.Attachment_ID__c}','{!ag.docURL}');return false;">
                                <apex:outputText value="{!ag.d.Name}" />
                            </a>
                        </apex:column>
                        <!--
                        <apex:column headerValue="View" rendered="{!isAndroid}">
                            <a href="{!ag.docURLAndroid}" target="_blank">
                                <apex:outputText value="{!ag.d.Name}" />
                            </a>
                        </apex:column>
                        
                        
                     <apex:column headerValue="Document Number" rendered="{!isAndroid}">
                            <apex:outputText value="{!ag.d.Name}" />
                        </apex:column>
                        -->
                        <!-- End Fix 7/14 -->
                        <apex:column value="{!ag.d.SDOC__Document_Name__c}" headerValue="Document Name"/>
                        <apex:column value="{!ag.d.SDOC__Status__c}" headerValue="Status"/> 
                        <apex:column value="{!ag.d.CreatedBy.Name}" headerValue="Created By"/> 
                        <apex:column value="{!ag.d.CreatedDate}" headerValue="Created On"/> 
                    </apex:pageBlockTable>
            </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    </apex:outputPanel>
</apex:pageBlock>
</apex:form>
<script type="text/javascript">
rebind = function() {
    var CKEDITOR   = window.CKEDITOR;
        for ( var i in CKEDITOR.instances ){
            var currentInstance = i;
             break;
        }
        delete CKEDITOR.instances[currentInstance];
        bind();
    };
    
bind = function(){
        var CKEDITOR_BASEPATH = '{!URLFOR($Resource.SDOC__ckEditor,'ckeditor/')}';
        CKEDITOR.editorConfig = function( config )
            {
            config.height = '300';
            config.disableNativeSpellChecker = false;
            // Define changes to default configuration here. For example:
            config.language = 'en';
            config.filebrowserBrowseUrl = '{!$Page.SDOC__SDFileList}';
            config.filebrowserUploadUrl = '{!$Page.SDOC__SDFileUpload}';
            config.filebrowserImageBrowseUrl = '{!$Page.SDOC__SDFileList}';
            config.filebrowserImageUploadUrl = '{!$Page.SDOC__SDFileUpload}'; 
            config.enterMode = CKEDITOR.ENTER_BR;
            config.shiftEnterMode = CKEDITOR.ENTER_P;
            config.allowedContent = true;
//            config.fullPage = true;
            config.removePlugins = 'liststyle,tabletools,scayt,menubutton,contextmenu';
            config.toolbar =
            [
            ['Maximize','Undo','Redo'],
            ['Styles','Format','Font','FontSize'],
            ['TextColor','BGColor'],        
            ['Bold','Italic','Underline','Strike','-',],
            ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock']
            ];
            };
        
        if (!document.getElementsByClassName) {
            document.getElementsByClassName = function (cn) { 
                var rx = new RegExp("(?:^|\\s)" + cn+ "(?:$|\\s)");
                var allT = document.getElementsByTagName("*"), allCN = [], ac="", i = 0, a;
                    while (a = allT[i=i+1]) {
                      ac=a.className;
                      if ( ac && ac.indexOf(cn) !==-1) {
                        if(ac===cn){ allCN[allCN.length] = a; continue;   }
                        rx.test(ac) ? (allCN[allCN.length] = a) : 0;
                      }
                    }
                return allCN;
            }
        }
        
        if (document.getElementsByClassName){
            var e = document.getElementsByClassName( 'ckeditor1' );
            for(var i=0;i<e.length;i++)
                {
                var editor1 = CKEDITOR.replace( e[i]);
                }
           }
        };
    
windowonload = function() { 
            showGeneratingDocsStatus();
            attach();
            YAHOO.force.com.init();
            if (getQuerystring('autoEmail')!=''||getQuerystring('autoemail')!=''){
                YAHOO.force.com.showEmail();
            }
        }
        
addEvent(window, 'load', function(){ windowonload() });
function addEvent(element, event, fn) {
    if (element.addEventListener)
        element.addEventListener(event, fn, false);
    else if (element.attachEvent)
        element.attachEvent('on' + event, fn);
}

</script>

<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc, 'jquery-1.8.3.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc, 'jszip.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc, 'jszip-utils.js')}"/>
<script type="text/javascript">
var sitePrefix = '{!$Site.Prefix}';
var remotingConfig = { buffer: false, escape: false, timeout: 30000 };
var numDocxAttachmentsToProcess = 0;
var numDocxAttachmentsProcessed = 0;
var sdocIds = [];

function completeDocxAttachments() {
  createPolyfills();
  var sdidStr = '{!SDDocsGeneratedIdsDocx}';
  if (sdidStr !== null && sdidStr !== '') {
    sdocIds = sdidStr.split(',');
    numDocxAttachmentsToProcess = sdocIds.length;
    for (var i = 0; i < sdocIds.length; i++) {
      getDocxMergedContent(sdocIds[i]);
    }
  } else {
    debugAlert('No DOCX\'s were selected.', false, false);
    doneWithDocxStuff();
  }
}

function getImgSrc(imgTag) {
  var match = /src\s*=\s*[\'\"](.*?)[\'\"]/.exec(imgTag);
  if (match !== null) {
    /* .replace(/:\/\/:/g, '://'); is required for a weird firefox
    bug where bad imgSrc's of the form https://://myUrl.com don't trigger
    the onload nor the onerror event, resulting in numImgTagsProcessed
    not being incremented and hence the "Generating Documents..." spinner
    spinning indefinitely (docs fail to generate) */
    var url = match[1].replace(/\&amp\;/g, '&').replace(/:\/\/:/g, '://');
    if (url !== null && url !== '') {
      return url;
    } else { return null; }
  } else { return null; }
}

function getDictSize(dict) {
  var dictSize = 0;
  for (var key in dict) {
    if (dict.hasOwnProperty(key)) {
      dictSize++;
    }
  }
  return dictSize;
}

/* This calls getContent on a new PageReference linking to
/apex/SDTemplateDocx?id=sdocId, and makes any edits to that content
that can only be made via JavaScript (e.g. getting rich text image dimensions) */ 
function getDocxMergedContent(sdocId) {
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SDCreateController.getDocxMergedContent}',
    sdocId,
    sitePrefix,
    function (result, event) { // Callback for the JS Remoting function.
        if (event.status) {
          debugAlert('[getDocxMergedContent] Success!', false, false);
          /* result is a string of concatenated XML files that we preprocess here */
          var preprocessedContent = result;

          /* Some <img>'s don't specify a width and height - however, DOCX requires
          both a width and height to be specified. The following code gets the
          width and height of those <img>'s and updates the <img>'s in result */
          var imgTags = preprocessedContent.match(/<img.*?>/g);
          if (imgTags !== null) {
            var urlDimensionMap = {};
            var numImgTagsProcessed = 0;
            for (var i = 0; i < imgTags.length; i++) {
              var img = new Image();
              /* Set img.id to imgSrc and use urlDimensionMap[this.id] instead
              of urlDimensionMap[this.src] because Salesforce modifies
              this.src upon creation and we need the key in the dict to be
              exactly the same as imgSrc so we can access it via imgSrc later */
              img.onload = function(){
                urlDimensionMap[this.id] = { width : this.width, height : this.height };
                numImgTagsProcessed++;
                //console.log('onload imgSrc:' + numImgTagsProcessed + '|' + this.id);
              };
              img.onerror = function() {
                this.onerror=null;
                urlDimensionMap[this.id] = { width : '0', height : '0' };
                numImgTagsProcessed++;
                //console.log('onerror imgSrc:' + numImgTagsProcessed + '|' + this.id);
              }
              var imgSrc = getImgSrc(imgTags[i]);
              if (imgSrc !== null) {
                img.id = imgSrc;
                img.src = imgSrc;
              } else {
                numImgTagsProcessed++;
                //console.log('null imgSrc:' + numImgTagsProcessed);
              }
            }
            /* This interval is safe. Tested with intervals as low  
            as .0001ms (actual interval in practice is 250ms) and the 
            "if (urlDimSize == imgTags.length)" branch is entered exactly once
            every time, hence the document generates without error every time. */
            var intervalId = setInterval(function() {
              /* Add the found dimensions to the images that lack dimensions */
              console.log('nitp:'+ numImgTagsProcessed + '|itl:' + imgTags.length);
              if (numImgTagsProcessed == imgTags.length) {
                clearInterval(intervalId);
                for (var i = 0; i < imgTags.length; i++) {
                  var imgTag = imgTags[i];
                  var imgSrc = getImgSrc(imgTags[i]);
                  if (imgSrc !== null) {
                    var hasWidthAlready = 
                      imgTag.search(/width\s*?=\s*?/) != -1 
                      || imgTag.search(/style\s*?=\s*?["'].*?width\s*?:.*?["']/) != -1;
                    var hasHeightAlready = 
                      imgTag.search(/height\s*?=\s*?/) != -1
                      || imgTag.search(/style\s*?=\s*?["'].*?height\s*?:.*?["']/) != -1;
                    /* Only add the found dimensions if this image does not already
                    have both height and width specified */
                    if (!(hasWidthAlready && hasHeightAlready)) {
                      var dimensions = 'width="' + urlDimensionMap[imgSrc].width + 'px" ';
                      dimensions += 'height="' + urlDimensionMap[imgSrc].height + 'px" ';
                      imgTag = imgTag.replace(/\<img/, '<img ' + dimensions);
                      preprocessedContent = preprocessedContent.replace(imgTags[i], imgTag);
                    }
                  }
                }

                getDocxFileMap(sdocId, preprocessedContent);
              }
            }, 250);
          } 

          else {
            getDocxFileMap(sdocId, preprocessedContent);
          }

        } else {
          debugAlert('[getDocxMergedContent] Failure! ' + event.message, true, true);
        }
    },
    remotingConfig
  );
}

/* This function processes the DOCX S-Doc with ID sdocId */
function getDocxFileMap(sdocId, preprocessedContent) {
  var BASE64_MARKER = '{!BASE64_MARKER}';
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SDCreateController.getDocxFileMap}',
    sdocId,
    sitePrefix,
    preprocessedContent,
    function (result, event) { // Callback for the JS Remoting function.
        if (event.status) {
          debugAlert('[getDocxFileMap] Success!', false, false);
          /* result is a map of the form { filename => filebody } */

          var zip = new JSZip();
          for (var filename in result) {
            if (result.hasOwnProperty(filename)) {
              var filebody = result[filename];
              // Handle image files here
              if (filebody.startsWith(BASE64_MARKER)) {
                filebody = filebody.replace(BASE64_MARKER, '');
                zip.file(filename, filebody, {base64: true});
              }
              // Handle plaintext files here 
              else {
                zip.file(filename, filebody);
              }
            }
          }
          
          zip.generateAsync({type:"base64"})
          .then(function(content) {
            /* Max RemoteAction input size is 4MB so request needs to be broken up into chunks.
            1MB is a little over a million characters, so chunks size
            is currently about 2MB (2 million characters).
            Reduce chunkSize if anyone gets an "Input too long" error */
            var zipChunks = [];
            var chunkSize = 1000000000;
            for (var i = 0; i < content.length; i += chunkSize) {
                zipChunks.push(content.substring(i, i + chunkSize));
            }
            updateDocxAttachment(sdocId, zipChunks, 0);
          });
        } 

        /* If an error occurred in this RemoteAction, consider the DOCX to be finished processing
        as updateDocxAttachment will not be called for this DOCX due to the error.
        Only call updateSDocStatuses() if this was the last DOCX to be processed. */
        else {
          debugAlert('[getDocxFileMap] Failure! ' + event.message, true, true);
          numDocxAttachmentsProcessed++;
          console.log('ndap:' + numDocxAttachmentsProcessed 
            + '|' + 'ndatp:' + numDocxAttachmentsToProcess
          );
          if (numDocxAttachmentsProcessed === numDocxAttachmentsToProcess) {
            updateSDocStatuses();
          }
        }
    },
    remotingConfig
  );
}

/* This function processes the DOCX S-Doc with ID sdocId */
function updateDocxAttachment(sdocId, zipChunks, chunkNum) {
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SDCreateController.updateDocxAttachment}',
    sdocId,
    zipChunks[chunkNum],
    chunkNum,
    function (result, event) { // Callback for the JS Remoting function.
        if (event.status) {
          debugAlert('[updateDocxAttachment] Success!', false, false);

          chunkNum++;
          if (chunkNum < zipChunks.length) {
            updateDocxAttachment(sdocId, attachmentId, zipChunks, chunkNum);
          }
        } else {
          debugAlert('[updateDocxAttachment] Failure! ' + event.message, true, true);
        }

        /* Regardless of whether an error occurred in the RemoteAction, consider
        this DOCX to be finished processing. Only call updateSDocStatuses() 
        if this was the last DOCX to be processed. */
        numDocxAttachmentsProcessed++;
        if (numDocxAttachmentsProcessed === numDocxAttachmentsToProcess) {
          updateSDocStatuses();
        }
    },
    remotingConfig
  );
}

/* This function updates the GD_Status__c field on 
all the DOCX S-Docs to 'Linked to [File|Attachment]' */
function updateSDocStatuses() {
  var calledDoneWithDocxStuff = false;
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SDCreateController.updateSDocStatuses}',
    sdocIds,
    function (result, event) { // Callback for the JS Remoting function.
        if (event.status) {
          debugAlert('[updateSDocStatus] Success!', false, false);
        } else {
          debugAlert('[updateSDocStatus] Failure! ' + event.message, true, true);
        }

        /* Once the DOCX S-Doc statuses have been updated, we're done! Regardless
        of whether an error occurred in this RemoteAction, we're done with DOCXs,
        so it's finally time to call doneWithDocxStuff(); */
        doneWithDocxStuff();
        calledDoneWithDocxStuff = true;
    },
    remotingConfig
  );

  /* Play it safe. If for some reason, the RemoteAction callback blew up,
  then doneProcessingDocxHelper was not called, so we need to call it here
  or else the "Generating Documents..." spinner won't go away and the doclist
  won't rerender */
  if (!calledDoneWithDocxStuff) {
    doneWithDocxStuff();
  }
}

function doneWithDocxStuff() {
  rerenderDocList();
  hideGeneratingDocsStatus();
}

/* Show the "Generating Documents..." spinner */
function showGeneratingDocsStatus() {
  $('[id*="generating_docs_status"]').css('display', 'inline');
}

/* Hide the "Generating Documents..." spinner */
function hideGeneratingDocsStatus() {
  $('[id*="generating_docs_status"]').css('display', 'none');
}

function createPolyfills() {
  if (!String.prototype.includes) {
    String.prototype.includes = function(search, start) {
      'use strict';
      if (typeof start !== 'number') {
        start = 0;
      }
      
      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.startsWith) {
      String.prototype.startsWith = function(searchString, position){
        return this.substr(position || 0, searchString.length) === searchString;
    };
  }

  if (!Element.prototype.remove) {
    Element.prototype.remove = function remove() {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    };
  }
}

function debugAlert(message, isAlert, alwaysShow) {
  var showDebugStatements = false; // Set false when pushing to production
  if (showDebugStatements || alwaysShow) {
    if (isAlert) {
      alert(message);
    } else {
      console.log(message);
    }
  }
}
</script>

<apex:form >
<apex:actionFunction name="rerenderDocList" action="{!doNothing}"  oncomplete="bind();" 
                    rerender="out,emailSubPanel,BtnsTopPanel,BtnsBotPanel"/>
<apex:actionFunction name="attach" action="{!createAttachments}"  oncomplete="completeDocxAttachments();" />

</apex:form>
</apex:page>